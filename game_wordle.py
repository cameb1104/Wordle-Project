from logic_wordle import Wordle
from colorama import Fore as edit_color
from board_wordle import Board
from color_converter import Convert
import random

class LoadData:
    """
    This class contains all potential key words for a game of Wordle. Using a function to
    derive five letter words from an input file, this class adds those words to a set.
    """
    def load_word_set(path: str):
        """
        Loads in the outputfile of valid key words. Strips and uppercases each word and adds them 
        to a set of words available for the main class to draw from.
        """
        # Creates a word set
        word_set = set()

        # Opens output file
        # Strips and uppercases each word
        # Add each stripped line in the file to the word set
        with open(path, "r") as f:
            for line in f.readlines():
                word = line.strip().upper()
                word_set.add(word)
        return word_set


class Results:
    """
    Records the results generated by the result function within the class. The result is a board
    that formats each valid guess by the user into a row. These words are appended to the game
    board after each letter is evealuated for its necesary color.
    """
    def print_results(wordle: Wordle):
        """
        Assembles the board with each guess recorded from the user on a seperate line. Leaves a 
        dashed line for each character in a word that is removed once filled with a word.
        """

        # Spaces out each new iteration of the game by adding new lines and a seperator
        # Prints the number of remaining attempts
        print("\n-----------------------------\n")
        print(f"you have {wordle.prop_remaining_attempts} attempts left.\n")
        
        # List of lines left in the game
        # Records how many lines have not been filled by a word
        lines = []
        
        # Prints the user input word after each letter has been assigned a color
        for word in wordle.attempts:
            result = wordle.get_guess(word)
            colored_appended_result = Convert.color_append(result)
            lines.append(colored_appended_result)
        
        # Adds row of empty lines for number of remaining attempts
        # These acts as place holders for new words
        for i in range(wordle.prop_remaining_attempts):

            # Creates a space between empty letter place holders
            lines.append(" ".join(["_"] * wordle.WORD_LENGTH))

        # Updates game board with remaining attempts to account for empty rows of lines
        Board.design_border(lines)


class Main(Results):
    """
    This class contains the main function. This function creates a game of wordle by selecting a word and checking the guesses
    of the user to see if they are correct. This class inherits a function form the Results class that creates the board and 
    outputs the number of attempts left. Each iteration of the game is saved and new guesses are appended to the board.
    """
    def main():
        """
        The main function of this program randomly selects a five letter word to be used for the game. It contains the input conditions
        for user input and checks the validity of guesses. It then compares the guess and based on the letters and the letter locations
        the function decides if the two are the same word or not.
        """

        # The set of five letter words is loaded
        # A random word is picked form the set and is set as the key for the game
        word_set = LoadData.load_word_set("data/word_output.txt")
        key = random.choice(list(word_set))
        wordle = Wordle(key)

        # This loop runs while the number of guesses the user has made is less than 6
        while wordle.prop_can_guess:

            # Takes input from the user and uppercases it
            # Uppercasing here allowed a user to type in any case
            word = input('\nGuess the word: ').upper()

            # Checks if the length of the users guess is 5
            if len(word) != wordle.WORD_LENGTH:
                print(
                    edit_color.RED 
                    + f"Word must be {wordle.WORD_LENGTH} characters long!" 
                    + edit_color.RESET
                )
                continue

            # Checks if the user input is a five letter word is a real word
            if not word in word_set:
                print(
                    edit_color.RED
                    + f"{word} is not a valid word!"
                    + edit_color.RESET
                )
                continue
            
            # If the guess satisfies the conditions above then it is added as an attempt
            wordle.get_attempt(word)
            Results.print_results(wordle)
        
        # This if else statement is checked once the number of guesses left is zero or if the word has been guessed
        # If the word is guess, the winning message is dispalyed with the number of attempts left
        if wordle.prop_solved:
            print(f"You've solved the puzzle with {wordle.prop_remaining_attempts} attempts left!")
            print("")
            print(
            edit_color.GREEN 
            +"Congradultions!"
            + edit_color.RESET + "\n"
            )
        
        # If the amount of attempts left is zero then the losing message is printed and the winning word is printed
        else:
            print("You've failed to solve the puzzle.")
            print("")
            print("The key word was: " + edit_color.GREEN + wordle.key + edit_color.RESET)
            print("")

# Runs the game
if __name__ == "__main__":
    Main.main()
